{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nvar styles = {\n  \"container\": \"_styles-module__container__1Lxpd\",\n  \"error-container\": \"_styles-module__error-container__eEFqC\",\n  \"error-message\": \"_styles-module__error-message__hldOr\",\n  \"retry-button\": \"_styles-module__retry-button__3gdo0\",\n  \"spinner\": \"_styles-module__spinner__2y6Bx\",\n  \"spin\": \"_styles-module__spin__1sp4O\"\n};\nconst usePayPalScript = _ref => {\n  let {\n    clientId,\n    currency,\n    onError,\n    intent,\n    paypalElement\n  } = _ref;\n  const INTENT = intent ? `&intent=${intent === null || intent === void 0 ? void 0 : intent.toLocaleLowerCase()}` : '';\n  const [buttonState, setButtonState] = useState({\n    isLoadingButton: false,\n    buttonLoaded: false,\n    errorMessage: ''\n  });\n  const {\n    isLoadingButton,\n    buttonLoaded,\n    errorMessage\n  } = buttonState;\n  useEffect(() => {\n    if (errorMessage || !paypalElement) return;\n    if (!clientId) {\n      console.log({\n        buttonState\n      });\n      const errorMessage = 'Client Id is required to load PayPal Smart Button';\n      onError && onError(new Error(errorMessage));\n      console.error(errorMessage);\n      return setButtonState({\n        isLoadingButton: false,\n        buttonLoaded: false,\n        errorMessage\n      });\n    }\n    if (!isLoadingButton && !buttonLoaded && !errorMessage) {\n      setButtonState(prev => ({\n        ...prev,\n        isLoadingButton: true\n      }));\n      const script = document.createElement('script');\n      script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}&currency=${currency}${INTENT}`;\n      script.addEventListener('load', () => setButtonState(prev => ({\n        ...prev,\n        isLoadingButton: false,\n        buttonLoaded: true\n      })));\n      document.body.appendChild(script);\n      script.addEventListener('error', error => {\n        console.error(error);\n        onError && onError(error);\n        return setButtonState({\n          isLoadingButton: false,\n          buttonLoaded: false,\n          errorMessage: `An error occured while isLoadingButton paypal smart buttons`\n        });\n      });\n    }\n  }, [buttonState, paypalElement]);\n  return {\n    buttonState,\n    setButtonState\n  };\n};\nconst usePayPalCheckout = options => {\n  const GlobalWindow = window;\n  const [paypalElement, setPayPalElement] = useState();\n  const {\n    clientId,\n    intent = 'CAPTURE',\n    amount,\n    description = 'payment',\n    currency = 'USD',\n    buttonStyles,\n    onSuccess,\n    onError\n  } = options;\n  const {\n    buttonState,\n    setButtonState\n  } = usePayPalScript({\n    clientId,\n    currency,\n    onError,\n    intent,\n    paypalElement\n  });\n  const {\n    isLoadingButton,\n    buttonLoaded,\n    errorMessage\n  } = buttonState;\n  const paypalRef = node => setPayPalElement(node);\n  const onRetry = () => {\n    setButtonState({\n      buttonLoaded: false,\n      isLoadingButton: false,\n      errorMessage: ''\n    });\n  };\n  const createOrder = (_data, actions) => {\n    const purchase_units = [{\n      description: description,\n      amount: {\n        currency,\n        value: amount\n      }\n    }];\n    return actions.order.create({\n      intent,\n      purchase_units\n    });\n  };\n  const errorHandler = error => {\n    console.error({\n      error\n    });\n    onError && onError(error);\n  };\n  const onApprove = async (data, actions) => {\n    const getOrder = () => {\n      if (intent === 'AUTHORIZE') return actions.order.authorize();\n      return actions.order.capture();\n    };\n    const order = await getOrder();\n    onSuccess && onSuccess(data, order);\n  };\n  useEffect(() => {\n    if (buttonLoaded && !isLoadingButton && !errorMessage && paypalElement) {\n      if (!(GlobalWindow !== null && GlobalWindow !== void 0 && GlobalWindow.paypal)) {\n        const errorMessage = 'PayPal button was not buttonLoaded successfully...';\n        onError && onError(new Error(errorMessage));\n        return setButtonState({\n          isLoadingButton: false,\n          buttonLoaded: false,\n          errorMessage\n        });\n      }\n      setTimeout(() => {\n        GlobalWindow.paypal.Buttons({\n          ...(buttonStyles && {\n            style: buttonStyles\n          }),\n          createOrder,\n          onApprove,\n          onError: errorHandler\n        }).render(paypalElement);\n      });\n    }\n  }, [buttonState]);\n  return {\n    ...buttonState,\n    onRetry,\n    paypalRef\n  };\n};\nconst Spinner = _ref2 => {\n  let {\n    isLoading\n  } = _ref2;\n  return isLoading ? React.createElement(\"div\", {\n    className: styles.spinner\n  }) : null;\n};\nconst ErrorContainer = _ref3 => {\n  let {\n    errorMessage,\n    onRetry\n  } = _ref3;\n  return React.createElement(\"div\", {\n    className: styles['error-container']\n  }, React.createElement(\"p\", {\n    className: styles['error-message']\n  }, errorMessage), React.createElement(\"button\", {\n    onClick: onRetry && onRetry,\n    className: styles['retry-button']\n  }, \"Try again\"));\n};\nconst PayPalCheckout = props => {\n  const {\n    isLoadingButton,\n    buttonLoaded,\n    errorMessage,\n    onRetry,\n    paypalRef\n  } = usePayPalCheckout({\n    ...props\n  });\n  const renderReactPayPalStates = () => {\n    if (buttonLoaded) return;\n    if (isLoadingButton) return React.createElement(Spinner, {\n      isLoading: isLoadingButton\n    });\n    if (errorMessage) return React.createElement(ErrorContainer, {\n      errorMessage: errorMessage,\n      onRetry: onRetry\n    });\n    return null;\n  };\n  return React.createElement(\"div\", {\n    className: styles.container\n  }, React.createElement(\"div\", {\n    ref: paypalRef\n  }), renderReactPayPalStates());\n};\nvar paypalCheckout_component = React.memo(PayPalCheckout);\nexport default paypalCheckout_component;\nexport { usePayPalCheckout };","map":{"version":3,"mappings":"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","names":["usePayPalScript","clientId","currency","onError","intent","paypalElement","INTENT","toLocaleLowerCase","buttonState","setButtonState","useState","isLoadingButton","buttonLoaded","errorMessage","useEffect","console","log","Error","error","prev","script","document","createElement","src","addEventListener","body","appendChild","usePayPalCheckout","options","GlobalWindow","window","setPayPalElement","amount","description","buttonStyles","onSuccess","paypalRef","node","onRetry","createOrder","_data","actions","purchase_units","value","order","create","errorHandler","onApprove","data","getOrder","authorize","capture","paypal","setTimeout","Buttons","style","render","Spinner","isLoading","React","className","styles","spinner","ErrorContainer","onClick","PayPalCheckout","props","renderReactPayPalStates","container","ref","memo"],"sources":["D:\\xampp\\htdocs\\Ecomercy-React-Nodejs\\Fontend\\node_modules\\react-paypal-checkout-button\\src\\hooks\\use-paypal-script.hook.ts","D:\\xampp\\htdocs\\Ecomercy-React-Nodejs\\Fontend\\node_modules\\react-paypal-checkout-button\\src\\hooks\\use-paypal-checkout.hook.ts","D:\\xampp\\htdocs\\Ecomercy-React-Nodejs\\Fontend\\node_modules\\react-paypal-checkout-button\\src\\components\\spinner.component.tsx","D:\\xampp\\htdocs\\Ecomercy-React-Nodejs\\Fontend\\node_modules\\react-paypal-checkout-button\\src\\components\\error-container.component.tsx","D:\\xampp\\htdocs\\Ecomercy-React-Nodejs\\Fontend\\node_modules\\react-paypal-checkout-button\\src\\components\\paypal-checkout\\paypal-checkout.component.tsx"],"sourcesContent":["import { useEffect, useState } from 'react'\n// eslint-disable-next-line no-unused-vars\nimport { ButtonState, UsePayPalScriptOptions } from '../types'\n\nconst usePayPalScript = ({\n  clientId,\n  currency,\n  onError,\n  intent,\n  paypalElement\n}: UsePayPalScriptOptions) => {\n  const INTENT = intent ? `&intent=${intent?.toLocaleLowerCase()}` : ''\n\n  const [buttonState, setButtonState] = useState<ButtonState>({\n    isLoadingButton: false,\n    buttonLoaded: false,\n    errorMessage: ''\n  })\n\n  const { isLoadingButton, buttonLoaded, errorMessage } = buttonState\n\n  useEffect(() => {\n    if (errorMessage || !paypalElement) return\n\n    if (!clientId) {\n      console.log({ buttonState })\n\n      const errorMessage = 'Client Id is required to load PayPal Smart Button'\n\n      onError && onError(new Error(errorMessage))\n\n      console.error(errorMessage)\n\n      return setButtonState({\n        isLoadingButton: false,\n        buttonLoaded: false,\n        errorMessage\n      })\n    }\n\n    if (!isLoadingButton && !buttonLoaded && !errorMessage) {\n      setButtonState((prev) => ({ ...prev, isLoadingButton: true }))\n\n      const script = document.createElement('script')\n      script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}&currency=${currency}${INTENT}`\n\n      script.addEventListener('load', () =>\n        setButtonState((prev) => ({\n          ...prev,\n          isLoadingButton: false,\n          buttonLoaded: true\n        }))\n      )\n\n      document.body.appendChild(script)\n\n      script.addEventListener('error', (error) => {\n        console.error(error)\n\n        onError && onError(error)\n\n        return setButtonState({\n          isLoadingButton: false,\n          buttonLoaded: false,\n          errorMessage: `An error occured while isLoadingButton paypal smart buttons`\n        })\n      })\n    }\n  }, [buttonState, paypalElement])\n\n  return {\n    buttonState,\n    setButtonState\n  }\n}\n\nexport default usePayPalScript\n","/* eslint-disable no-unused-vars */\n/* eslint-disable camelcase */\nimport { useEffect, useState } from 'react'\nimport {\n  OnApproveDataTypes,\n  UsePayPalCheckoutOptions,\n  UsePayPalCheckoutValues\n} from '../types'\nimport usePayPalScript from './use-paypal-script.hook'\n\nconst usePayPalCheckout = (\n  options: UsePayPalCheckoutOptions\n): UsePayPalCheckoutValues => {\n  const GlobalWindow: any = window\n\n  const [paypalElement, setPayPalElement] = useState()\n\n  const {\n    clientId,\n    intent = 'CAPTURE',\n    amount,\n    description = 'payment',\n    currency = 'USD',\n    buttonStyles,\n    onSuccess,\n    onError\n  } = options\n\n  const { buttonState, setButtonState } = usePayPalScript({\n    clientId,\n    currency,\n    onError,\n    intent,\n    paypalElement\n  })\n\n  const { isLoadingButton, buttonLoaded, errorMessage } = buttonState\n\n  const paypalRef = (node: any) => setPayPalElement(node)\n\n  const onRetry = () => {\n    setButtonState({\n      buttonLoaded: false,\n      isLoadingButton: false,\n      errorMessage: ''\n    })\n  }\n\n  const createOrder = (_data: any, actions: any) => {\n    const purchase_units = [\n      {\n        description: description,\n        amount: {\n          currency,\n          value: amount\n        }\n      }\n    ]\n\n    // console.log({ data, actions })\n\n    return actions.order.create({\n      intent,\n      purchase_units\n    })\n  }\n\n  const errorHandler = (error: any) => {\n    console.error({ error })\n\n    onError && onError(error)\n  }\n\n  const onApprove = async (data: OnApproveDataTypes, actions: any) => {\n    const getOrder = () => {\n      if (intent === 'AUTHORIZE') return actions.order.authorize()\n\n      return actions.order.capture()\n    }\n\n    const order = await getOrder()\n\n    onSuccess && onSuccess(data, order)\n  }\n\n  useEffect(() => {\n    if (buttonLoaded && !isLoadingButton && !errorMessage && paypalElement) {\n      if (!GlobalWindow?.paypal) {\n        const errorMessage =\n          'PayPal button was not buttonLoaded successfully...'\n\n        onError && onError(new Error(errorMessage))\n\n        return setButtonState({\n          isLoadingButton: false,\n          buttonLoaded: false,\n          errorMessage\n        })\n      }\n\n      setTimeout(() => {\n        GlobalWindow.paypal\n          .Buttons({\n            ...(buttonStyles && { style: buttonStyles }),\n            createOrder,\n            onApprove,\n            onError: errorHandler\n          })\n          .render(paypalElement)\n      })\n    }\n  }, [buttonState])\n\n  return {\n    ...buttonState,\n    onRetry,\n    paypalRef\n  }\n}\n\nexport default usePayPalCheckout\n","/* eslint-disable no-unused-vars */\nimport React from 'react'\nimport { SpinnerProps } from '../types'\nimport styles from '../styles.module.css'\n\nconst Spinner: React.FC<SpinnerProps> = ({ isLoading }) =>\n  isLoading ? <div className={styles.spinner} /> : null\n\nexport default Spinner\n","/* eslint-disable no-unused-vars */\nimport React from 'react'\nimport { ErrorContainerProps } from '../types'\nimport styles from '../styles.module.css'\n\nconst ErrorContainer: React.FC<ErrorContainerProps> = ({\n  errorMessage,\n  onRetry\n}) => (\n  <div className={styles['error-container']}>\n    <p className={styles['error-message']}>{errorMessage}</p>\n\n    <button onClick={onRetry && onRetry} className={styles['retry-button']}>\n      Try again\n    </button>\n  </div>\n)\n\nexport default ErrorContainer\n","/* eslint-disable camelcase */\n/* eslint-disable no-unused-vars */\nimport React from 'react'\nimport { PayPalCheckoutProps } from '../../types'\n\nimport styles from '../../styles.module.css'\nimport usePayPalCheckout from '../../hooks/use-paypal-checkout.hook'\nimport Spinner from '../spinner.component'\nimport ErrorContainer from '../error-container.component'\n\nconst PayPalCheckout: React.FC<PayPalCheckoutProps> = (props) => {\n  const {\n    isLoadingButton,\n    buttonLoaded,\n    errorMessage,\n    onRetry,\n\n    paypalRef\n  } = usePayPalCheckout({\n    ...props\n  })\n\n  const renderReactPayPalStates = () => {\n    if (buttonLoaded) return\n\n    if (isLoadingButton) return <Spinner isLoading={isLoadingButton} />\n\n    if (errorMessage)\n      return <ErrorContainer errorMessage={errorMessage} onRetry={onRetry} />\n\n    return null\n  }\n\n  return (\n    <div className={styles.container}>\n      <div ref={paypalRef} />\n\n      {renderReactPayPalStates()}\n    </div>\n  )\n}\n\nexport default React.memo(PayPalCheckout)\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}