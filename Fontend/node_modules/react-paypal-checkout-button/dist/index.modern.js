import React, { useState, useEffect } from 'react';

var styles = {"container":"_styles-module__container__1Lxpd","error-container":"_styles-module__error-container__eEFqC","error-message":"_styles-module__error-message__hldOr","retry-button":"_styles-module__retry-button__3gdo0","spinner":"_styles-module__spinner__2y6Bx","spin":"_styles-module__spin__1sp4O"};

const usePayPalScript = ({
  clientId,
  currency,
  onError,
  intent,
  paypalElement
}) => {
  const INTENT = intent ? `&intent=${intent === null || intent === void 0 ? void 0 : intent.toLocaleLowerCase()}` : '';
  const [buttonState, setButtonState] = useState({
    isLoadingButton: false,
    buttonLoaded: false,
    errorMessage: ''
  });
  const {
    isLoadingButton,
    buttonLoaded,
    errorMessage
  } = buttonState;
  useEffect(() => {
    if (errorMessage || !paypalElement) return;

    if (!clientId) {
      console.log({
        buttonState
      });
      const errorMessage = 'Client Id is required to load PayPal Smart Button';
      onError && onError(new Error(errorMessage));
      console.error(errorMessage);
      return setButtonState({
        isLoadingButton: false,
        buttonLoaded: false,
        errorMessage
      });
    }

    if (!isLoadingButton && !buttonLoaded && !errorMessage) {
      setButtonState(prev => ({ ...prev,
        isLoadingButton: true
      }));
      const script = document.createElement('script');
      script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}&currency=${currency}${INTENT}`;
      script.addEventListener('load', () => setButtonState(prev => ({ ...prev,
        isLoadingButton: false,
        buttonLoaded: true
      })));
      document.body.appendChild(script);
      script.addEventListener('error', error => {
        console.error(error);
        onError && onError(error);
        return setButtonState({
          isLoadingButton: false,
          buttonLoaded: false,
          errorMessage: `An error occured while isLoadingButton paypal smart buttons`
        });
      });
    }
  }, [buttonState, paypalElement]);
  return {
    buttonState,
    setButtonState
  };
};

const usePayPalCheckout = options => {
  const GlobalWindow = window;
  const [paypalElement, setPayPalElement] = useState();
  const {
    clientId,
    intent = 'CAPTURE',
    amount,
    description = 'payment',
    currency = 'USD',
    buttonStyles,
    onSuccess,
    onError
  } = options;
  const {
    buttonState,
    setButtonState
  } = usePayPalScript({
    clientId,
    currency,
    onError,
    intent,
    paypalElement
  });
  const {
    isLoadingButton,
    buttonLoaded,
    errorMessage
  } = buttonState;

  const paypalRef = node => setPayPalElement(node);

  const onRetry = () => {
    setButtonState({
      buttonLoaded: false,
      isLoadingButton: false,
      errorMessage: ''
    });
  };

  const createOrder = (_data, actions) => {
    const purchase_units = [{
      description: description,
      amount: {
        currency,
        value: amount
      }
    }];
    return actions.order.create({
      intent,
      purchase_units
    });
  };

  const errorHandler = error => {
    console.error({
      error
    });
    onError && onError(error);
  };

  const onApprove = async (data, actions) => {
    const getOrder = () => {
      if (intent === 'AUTHORIZE') return actions.order.authorize();
      return actions.order.capture();
    };

    const order = await getOrder();
    onSuccess && onSuccess(data, order);
  };

  useEffect(() => {
    if (buttonLoaded && !isLoadingButton && !errorMessage && paypalElement) {
      if (!(GlobalWindow !== null && GlobalWindow !== void 0 && GlobalWindow.paypal)) {
        const errorMessage = 'PayPal button was not buttonLoaded successfully...';
        onError && onError(new Error(errorMessage));
        return setButtonState({
          isLoadingButton: false,
          buttonLoaded: false,
          errorMessage
        });
      }

      setTimeout(() => {
        GlobalWindow.paypal.Buttons({ ...(buttonStyles && {
            style: buttonStyles
          }),
          createOrder,
          onApprove,
          onError: errorHandler
        }).render(paypalElement);
      });
    }
  }, [buttonState]);
  return { ...buttonState,
    onRetry,
    paypalRef
  };
};

const Spinner = ({
  isLoading
}) => isLoading ? React.createElement("div", {
  className: styles.spinner
}) : null;

const ErrorContainer = ({
  errorMessage,
  onRetry
}) => React.createElement("div", {
  className: styles['error-container']
}, React.createElement("p", {
  className: styles['error-message']
}, errorMessage), React.createElement("button", {
  onClick: onRetry && onRetry,
  className: styles['retry-button']
}, "Try again"));

const PayPalCheckout = props => {
  const {
    isLoadingButton,
    buttonLoaded,
    errorMessage,
    onRetry,
    paypalRef
  } = usePayPalCheckout({ ...props
  });

  const renderReactPayPalStates = () => {
    if (buttonLoaded) return;
    if (isLoadingButton) return React.createElement(Spinner, {
      isLoading: isLoadingButton
    });
    if (errorMessage) return React.createElement(ErrorContainer, {
      errorMessage: errorMessage,
      onRetry: onRetry
    });
    return null;
  };

  return React.createElement("div", {
    className: styles.container
  }, React.createElement("div", {
    ref: paypalRef
  }), renderReactPayPalStates());
};

var paypalCheckout_component = React.memo(PayPalCheckout);

export default paypalCheckout_component;
export { usePayPalCheckout };
//# sourceMappingURL=index.modern.js.map
