function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var styles = {"container":"_styles-module__container__1Lxpd","error-container":"_styles-module__error-container__eEFqC","error-message":"_styles-module__error-message__hldOr","retry-button":"_styles-module__retry-button__3gdo0","spinner":"_styles-module__spinner__2y6Bx","spin":"_styles-module__spin__1sp4O"};

var usePayPalScript = function usePayPalScript(_ref) {
  var clientId = _ref.clientId,
      currency = _ref.currency,
      onError = _ref.onError,
      intent = _ref.intent,
      paypalElement = _ref.paypalElement;
  var INTENT = intent ? "&intent=" + (intent === null || intent === void 0 ? void 0 : intent.toLocaleLowerCase()) : '';

  var _useState = React.useState({
    isLoadingButton: false,
    buttonLoaded: false,
    errorMessage: ''
  }),
      buttonState = _useState[0],
      setButtonState = _useState[1];

  var isLoadingButton = buttonState.isLoadingButton,
      buttonLoaded = buttonState.buttonLoaded,
      errorMessage = buttonState.errorMessage;
  React.useEffect(function () {
    if (errorMessage || !paypalElement) return;

    if (!clientId) {
      console.log({
        buttonState: buttonState
      });
      var _errorMessage = 'Client Id is required to load PayPal Smart Button';
      onError && onError(new Error(_errorMessage));
      console.error(_errorMessage);
      return setButtonState({
        isLoadingButton: false,
        buttonLoaded: false,
        errorMessage: _errorMessage
      });
    }

    if (!isLoadingButton && !buttonLoaded && !errorMessage) {
      setButtonState(function (prev) {
        return _extends({}, prev, {
          isLoadingButton: true
        });
      });
      var script = document.createElement('script');
      script.src = "https://www.paypal.com/sdk/js?client-id=" + clientId + "&currency=" + currency + INTENT;
      script.addEventListener('load', function () {
        return setButtonState(function (prev) {
          return _extends({}, prev, {
            isLoadingButton: false,
            buttonLoaded: true
          });
        });
      });
      document.body.appendChild(script);
      script.addEventListener('error', function (error) {
        console.error(error);
        onError && onError(error);
        return setButtonState({
          isLoadingButton: false,
          buttonLoaded: false,
          errorMessage: "An error occured while isLoadingButton paypal smart buttons"
        });
      });
    }
  }, [buttonState, paypalElement]);
  return {
    buttonState: buttonState,
    setButtonState: setButtonState
  };
};

var usePayPalCheckout = function usePayPalCheckout(options) {
  var GlobalWindow = window;

  var _useState = React.useState(),
      paypalElement = _useState[0],
      setPayPalElement = _useState[1];

  var clientId = options.clientId,
      _options$intent = options.intent,
      intent = _options$intent === void 0 ? 'CAPTURE' : _options$intent,
      amount = options.amount,
      _options$description = options.description,
      description = _options$description === void 0 ? 'payment' : _options$description,
      _options$currency = options.currency,
      currency = _options$currency === void 0 ? 'USD' : _options$currency,
      buttonStyles = options.buttonStyles,
      onSuccess = options.onSuccess,
      onError = options.onError;

  var _usePayPalScript = usePayPalScript({
    clientId: clientId,
    currency: currency,
    onError: onError,
    intent: intent,
    paypalElement: paypalElement
  }),
      buttonState = _usePayPalScript.buttonState,
      setButtonState = _usePayPalScript.setButtonState;

  var isLoadingButton = buttonState.isLoadingButton,
      buttonLoaded = buttonState.buttonLoaded,
      errorMessage = buttonState.errorMessage;

  var paypalRef = function paypalRef(node) {
    return setPayPalElement(node);
  };

  var onRetry = function onRetry() {
    setButtonState({
      buttonLoaded: false,
      isLoadingButton: false,
      errorMessage: ''
    });
  };

  var createOrder = function createOrder(_data, actions) {
    var purchase_units = [{
      description: description,
      amount: {
        currency: currency,
        value: amount
      }
    }];
    return actions.order.create({
      intent: intent,
      purchase_units: purchase_units
    });
  };

  var errorHandler = function errorHandler(error) {
    console.error({
      error: error
    });
    onError && onError(error);
  };

  var onApprove = function onApprove(data, actions) {
    try {
      var getOrder = function getOrder() {
        if (intent === 'AUTHORIZE') return actions.order.authorize();
        return actions.order.capture();
      };

      return Promise.resolve(getOrder()).then(function (order) {
        onSuccess && onSuccess(data, order);
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  React.useEffect(function () {
    if (buttonLoaded && !isLoadingButton && !errorMessage && paypalElement) {
      if (!(GlobalWindow !== null && GlobalWindow !== void 0 && GlobalWindow.paypal)) {
        var _errorMessage = 'PayPal button was not buttonLoaded successfully...';
        onError && onError(new Error(_errorMessage));
        return setButtonState({
          isLoadingButton: false,
          buttonLoaded: false,
          errorMessage: _errorMessage
        });
      }

      setTimeout(function () {
        GlobalWindow.paypal.Buttons(_extends({}, buttonStyles && {
          style: buttonStyles
        }, {
          createOrder: createOrder,
          onApprove: onApprove,
          onError: errorHandler
        })).render(paypalElement);
      });
    }
  }, [buttonState]);
  return _extends({}, buttonState, {
    onRetry: onRetry,
    paypalRef: paypalRef
  });
};

var Spinner = function Spinner(_ref) {
  var isLoading = _ref.isLoading;
  return isLoading ? React__default.createElement("div", {
    className: styles.spinner
  }) : null;
};

var ErrorContainer = function ErrorContainer(_ref) {
  var errorMessage = _ref.errorMessage,
      onRetry = _ref.onRetry;
  return React__default.createElement("div", {
    className: styles['error-container']
  }, React__default.createElement("p", {
    className: styles['error-message']
  }, errorMessage), React__default.createElement("button", {
    onClick: onRetry && onRetry,
    className: styles['retry-button']
  }, "Try again"));
};

var PayPalCheckout = function PayPalCheckout(props) {
  var _usePayPalCheckout = usePayPalCheckout(_extends({}, props)),
      isLoadingButton = _usePayPalCheckout.isLoadingButton,
      buttonLoaded = _usePayPalCheckout.buttonLoaded,
      errorMessage = _usePayPalCheckout.errorMessage,
      onRetry = _usePayPalCheckout.onRetry,
      paypalRef = _usePayPalCheckout.paypalRef;

  var renderReactPayPalStates = function renderReactPayPalStates() {
    if (buttonLoaded) return;
    if (isLoadingButton) return React__default.createElement(Spinner, {
      isLoading: isLoadingButton
    });
    if (errorMessage) return React__default.createElement(ErrorContainer, {
      errorMessage: errorMessage,
      onRetry: onRetry
    });
    return null;
  };

  return React__default.createElement("div", {
    className: styles.container
  }, React__default.createElement("div", {
    ref: paypalRef
  }), renderReactPayPalStates());
};

var paypalCheckout_component = React__default.memo(PayPalCheckout);

exports.default = paypalCheckout_component;
exports.usePayPalCheckout = usePayPalCheckout;
//# sourceMappingURL=index.js.map
